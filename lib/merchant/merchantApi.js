"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var request = require("request-promise");
var MerchantApi = (function () {
    function MerchantApi() {
    }
    MerchantApi.login = function (baseUrl, body) {
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, body: body });
        return request("merchant/login", opts);
    };
    MerchantApi.ticket = function (baseUrl, token, body) {
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, body: body, headers: { "Bex-Connection": token.Token } });
        return request("merchant/" + token.Path + "/ticket?type=" + body.Type, opts);
    };
    MerchantApi.result = function (baseUrl, token, ticketId) {
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, headers: { "Bex-Connection": token.Token } });
        return request("merchant/" + token.Path + "/ticket/" + ticketId + "/operate?name=result", opts);
    };
    MerchantApi.commit = function (baseUrl, token, body) {
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, headers: { "Bex-Connection": token.Token, "Bex-Nonce": body.Nonce } });
        return request("merchant/" + token.Path + "/ticket/" + body.Id + "/operate?name=commit", opts);
    };
    return MerchantApi;
}());
MerchantApi.opts = {
    baseUrl: null,
    body: {},
    headers: {},
    json: true,
    method: "POST",
    timeout: 20000,
};
exports.MerchantApi = MerchantApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyY2hhbnRBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWVyY2hhbnQvbWVyY2hhbnRBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSxpQ0FBOEI7QUFFOUIseUNBQTJDO0FBUTNDO0lBQUE7SUFtQ0EsQ0FBQztJQXJCaUIsaUJBQUssR0FBbkIsVUFBb0IsT0FBZSxFQUFFLElBQTBCO1FBQzNELElBQU0sSUFBSSxHQUFnQixlQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUMsQ0FBQztRQUNwRSxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFYSxrQkFBTSxHQUFwQixVQUFxQixPQUFlLEVBQUUsS0FBWSxFQUFFLElBQW1CO1FBQ25FLElBQU0sSUFBSSxHQUFnQixlQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFFLElBQUksTUFBQSxFQUFFLE9BQU8sRUFBRSxFQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUMsRUFBQyxDQUFDLENBQUM7UUFDOUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFZLEtBQUssQ0FBQyxJQUFJLHFCQUFnQixJQUFJLENBQUMsSUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFYSxrQkFBTSxHQUFwQixVQUFxQixPQUFlLEVBQUUsS0FBWSxFQUFFLFFBQWdCO1FBQ2hFLElBQU0sSUFBSSxHQUFnQixlQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFFLE9BQU8sRUFBRSxFQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUMsRUFBQyxDQUFDLENBQUM7UUFDeEcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFZLEtBQUssQ0FBQyxJQUFJLGdCQUFXLFFBQVEseUJBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFMUYsQ0FBQztJQUVhLGtCQUFNLEdBQXBCLFVBQXFCLE9BQWUsRUFBRSxLQUFZLEVBQUUsSUFBMkI7UUFDM0UsSUFBTSxJQUFJLEdBQWdCLGVBQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUMsT0FBTyxTQUFBLEVBQUUsT0FBTyxFQUFFLEVBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FBQztRQUNqSSxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQVksS0FBSyxDQUFDLElBQUksZ0JBQVcsSUFBSSxDQUFDLEVBQUUseUJBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVMLGtCQUFDO0FBQUQsQ0FBQyxBQW5DRDtBQUNrQixnQkFBSSxHQUFnQjtJQUM5QixPQUFPLEVBQUUsSUFBSTtJQUNiLElBQUksRUFBRSxFQUFFO0lBQ1IsT0FBTyxFQUFFLEVBSVI7SUFDRCxJQUFJLEVBQUUsSUFBSTtJQUNWLE1BQU0sRUFBRSxNQUFNO0lBQ2QsT0FBTyxFQUFFLEtBQUs7Q0FDakIsQ0FBQztBQVpPLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yICBUw7xtYXkgw4dlYmVyIDx0dW1heWNlYmVyQGdtYWlsLmNvbT5cbiAqIEBsaW5rICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9icmVuZHR1bWkvYmttZXhwcmVzc1xuICogQGxpY2Vuc2UgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICogQGRhdGUgMjcuMDQuMjAxN1xuICovXG5cbmltcG9ydCB7ZXh0ZW5kfSBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge0NvcmVPcHRpb25zfSBmcm9tIFwicmVxdWVzdFwiO1xuaW1wb3J0ICogYXMgcmVxdWVzdCBmcm9tIFwicmVxdWVzdC1wcm9taXNlXCI7XG5pbXBvcnQge01lcmNoYW50TG9naW5SZXF1ZXN0fSBmcm9tIFwiLi9yZXF1ZXN0L21lcmNoYW50TG9naW5SZXF1ZXN0XCI7XG5pbXBvcnQge1RpY2tldFJlcXVlc3R9IGZyb20gXCIuL3JlcXVlc3QvdGlja2V0UmVxdWVzdFwiO1xuaW1wb3J0IHtSYXdCZXhSZXNwb25zZX0gZnJvbSBcIi4vcmVzcG9uc2UvYmV4UmVzcG9uc2VcIjtcbmltcG9ydCB7TWVyY2hhbnROb25jZVJlc3BvbnNlfSBmcm9tIFwiLi9yZXNwb25zZS9ub25jZS9tZXJjaGFudE5vbmNlUmVzcG9uc2VcIjtcbmltcG9ydCB7UG9zRGF0YX0gZnJvbSBcIi4vcmVzcG9uc2UvcGF5bWVudFJlc3VsdFJlc3BvbnNlXCI7XG5pbXBvcnQge1Rva2VufSBmcm9tIFwiLi90b2tlblwiO1xuXG5leHBvcnQgY2xhc3MgTWVyY2hhbnRBcGkge1xuICAgIHB1YmxpYyBzdGF0aWMgb3B0czogQ29yZU9wdGlvbnMgPSB7XG4gICAgICAgIGJhc2VVcmw6IG51bGwsXG4gICAgICAgIGJvZHk6IHt9LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAvLyBcIkJleC1Db25uZWN0aW9uXCI6IFRva2VuLlRva2VuLFxuICAgICAgICAgICAgLy8gXCJCZXgtTm9uY2VcIjogTWVyY2hhbnROb25jZVJlc3BvbnNlLk5vbmNlLFxuICAgICAgICAgICAgLy8gXCJCZXgtVGlja2V0XCI6IFwiXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGpzb246IHRydWUsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHRpbWVvdXQ6IDIwMDAwLFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGxvZ2luKGJhc2VVcmw6IHN0cmluZywgYm9keTogTWVyY2hhbnRMb2dpblJlcXVlc3QpOiBQcm9taXNlPFJhd0JleFJlc3BvbnNlPFRva2VuPiB8IEVycm9yPiB7XG4gICAgICAgIGNvbnN0IG9wdHM6IENvcmVPcHRpb25zID0gZXh0ZW5kKE1lcmNoYW50QXBpLm9wdHMsIHtiYXNlVXJsLCBib2R5fSk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KFwibWVyY2hhbnQvbG9naW5cIiwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB0aWNrZXQoYmFzZVVybDogc3RyaW5nLCB0b2tlbjogVG9rZW4sIGJvZHk6IFRpY2tldFJlcXVlc3QpOiBQcm9taXNlPFJhd0JleFJlc3BvbnNlPFRva2VuPiB8IEVycm9yPiB7XG4gICAgICAgIGNvbnN0IG9wdHM6IENvcmVPcHRpb25zID0gZXh0ZW5kKE1lcmNoYW50QXBpLm9wdHMsIHtiYXNlVXJsLCBib2R5LCBoZWFkZXJzOiB7XCJCZXgtQ29ubmVjdGlvblwiOiB0b2tlbi5Ub2tlbn19KTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoYG1lcmNoYW50LyR7dG9rZW4uUGF0aH0vdGlja2V0P3R5cGU9JHtib2R5LlR5cGV9YCwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyByZXN1bHQoYmFzZVVybDogc3RyaW5nLCB0b2tlbjogVG9rZW4sIHRpY2tldElkOiBzdHJpbmcpOiBQcm9taXNlPFJhd0JleFJlc3BvbnNlPFBvc0RhdGE+IHwgRXJyb3I+IHtcbiAgICAgICAgY29uc3Qgb3B0czogQ29yZU9wdGlvbnMgPSBleHRlbmQoTWVyY2hhbnRBcGkub3B0cywge2Jhc2VVcmwsIGhlYWRlcnM6IHtcIkJleC1Db25uZWN0aW9uXCI6IHRva2VuLlRva2VufX0pO1xuICAgICAgICByZXR1cm4gcmVxdWVzdChgbWVyY2hhbnQvJHt0b2tlbi5QYXRofS90aWNrZXQvJHt0aWNrZXRJZH0vb3BlcmF0ZT9uYW1lPXJlc3VsdGAsIG9wdHMpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb21taXQoYmFzZVVybDogc3RyaW5nLCB0b2tlbjogVG9rZW4sIGJvZHk6IE1lcmNoYW50Tm9uY2VSZXNwb25zZSk6IFByb21pc2U8UmF3QmV4UmVzcG9uc2U8UG9zRGF0YT4gfCBFcnJvcj4ge1xuICAgICAgICBjb25zdCBvcHRzOiBDb3JlT3B0aW9ucyA9IGV4dGVuZChNZXJjaGFudEFwaS5vcHRzLCB7YmFzZVVybCwgaGVhZGVyczoge1wiQmV4LUNvbm5lY3Rpb25cIjogdG9rZW4uVG9rZW4sIFwiQmV4LU5vbmNlXCI6IGJvZHkuTm9uY2V9fSk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KGBtZXJjaGFudC8ke3Rva2VuLlBhdGh9L3RpY2tldC8ke2JvZHkuSWR9L29wZXJhdGU/bmFtZT1jb21taXRgLCBvcHRzKTtcbiAgICB9XG5cbn1cbiJdfQ==