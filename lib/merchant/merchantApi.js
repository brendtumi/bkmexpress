"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var request = require("request-promise");
var debug_1 = require("../debug");
var exceptions_1 = require("../exceptions");
var token_1 = require("./token");
var MerchantApi = (function () {
    function MerchantApi() {
    }
    MerchantApi.login = function (baseUrl, body) {
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, body: body });
        debug_1.Log.debug("MerchantApi", "merchant/login", opts);
        return request("merchant/login", opts);
    };
    MerchantApi.ticket = function (baseUrl, token, body) {
        if (!(token instanceof token_1.Token)) {
            throw new exceptions_1.MerchantServiceException("Token value invalid");
        }
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, body: body, headers: { "Bex-Connection": token.Token } });
        debug_1.Log.debug("MerchantApi", "merchant/" + token.Path + "/ticket?type=" + body.Type, opts);
        return request("merchant/" + token.Path + "/ticket?type=" + body.Type, opts);
    };
    MerchantApi.commit = function (baseUrl, token, body) {
        if (!(token instanceof token_1.Token)) {
            throw new exceptions_1.MerchantServiceException("Token value invalid");
        }
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, body: body, headers: { "Bex-Connection": token.Token, "Bex-Nonce": body.Nonce } });
        debug_1.Log.debug("MerchantApi", "merchant/" + token.Path + "/ticket/" + body.Id + "/operate?name=commit", opts);
        return request("merchant/" + token.Path + "/ticket/" + body.Id + "/operate?name=commit", opts);
    };
    MerchantApi.result = function (baseUrl, token, ticketId) {
        if (!(token instanceof token_1.Token)) {
            throw new exceptions_1.MerchantServiceException("Token value invalid");
        }
        var opts = lodash_1.extend(MerchantApi.opts, { baseUrl: baseUrl, headers: { "Bex-Connection": token.Token } });
        debug_1.Log.debug("MerchantApi", "merchant/" + token.Path + "/ticket/" + ticketId + "/operate?name=result", opts);
        return request("merchant/" + token.Path + "/ticket/" + ticketId + "/operate?name=result", opts);
    };
    MerchantApi.opts = {
        baseUrl: null,
        body: {},
        headers: {},
        json: true,
        method: "POST",
        timeout: 20000,
    };
    return MerchantApi;
}());
exports.MerchantApi = MerchantApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyY2hhbnRBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWVyY2hhbnQvbWVyY2hhbnRBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSxpQ0FBOEI7QUFFOUIseUNBQTJDO0FBQzNDLGtDQUE2QjtBQUM3Qiw0Q0FBdUQ7QUFNdkQsaUNBQThCO0FBRTlCO0lBQUE7SUErQ0EsQ0FBQztJQWpDaUIsaUJBQUssR0FBbkIsVUFBb0IsT0FBZSxFQUFFLElBQTBCO1FBQzNELElBQU0sSUFBSSxHQUFnQixlQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFFLElBQUksTUFBQSxFQUFDLENBQUMsQ0FBQztRQUNwRSxXQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRCxPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRWEsa0JBQU0sR0FBcEIsVUFBcUIsT0FBZSxFQUFFLEtBQVksRUFBRSxJQUFtQjtRQUNuRSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksYUFBSyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxJQUFJLHFDQUF3QixDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFNLElBQUksR0FBZ0IsZUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBQyxPQUFPLFNBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxPQUFPLEVBQUUsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQzlHLFdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGNBQVksS0FBSyxDQUFDLElBQUkscUJBQWdCLElBQUksQ0FBQyxJQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEYsT0FBTyxPQUFPLENBQUMsY0FBWSxLQUFLLENBQUMsSUFBSSxxQkFBZ0IsSUFBSSxDQUFDLElBQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRWEsa0JBQU0sR0FBcEIsVUFBcUIsT0FBZSxFQUFFLEtBQVksRUFBRSxJQUEyQjtRQUMzRSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksYUFBSyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxJQUFJLHFDQUF3QixDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFNLElBQUksR0FBZ0IsZUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBQyxPQUFPLFNBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxPQUFPLEVBQUUsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZJLFdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGNBQVksS0FBSyxDQUFDLElBQUksZ0JBQVcsSUFBSSxDQUFDLEVBQUUseUJBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0YsT0FBTyxPQUFPLENBQUMsY0FBWSxLQUFLLENBQUMsSUFBSSxnQkFBVyxJQUFJLENBQUMsRUFBRSx5QkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRWEsa0JBQU0sR0FBcEIsVUFBcUIsT0FBZSxFQUFFLEtBQVksRUFBRSxRQUFnQjtRQUNoRSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksYUFBSyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxJQUFJLHFDQUF3QixDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFNLElBQUksR0FBZ0IsZUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBQyxPQUFPLFNBQUEsRUFBRSxPQUFPLEVBQUUsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3hHLFdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGNBQVksS0FBSyxDQUFDLElBQUksZ0JBQVcsUUFBUSx5QkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRyxPQUFPLE9BQU8sQ0FBQyxjQUFZLEtBQUssQ0FBQyxJQUFJLGdCQUFXLFFBQVEseUJBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQTVDYSxnQkFBSSxHQUFnQjtRQUM5QixPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEVBSVI7UUFDRCxJQUFJLEVBQUUsSUFBSTtRQUNWLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLEtBQUs7S0FDakIsQ0FBQztJQW1DTixrQkFBQztDQUFBLEFBL0NELElBK0NDO0FBL0NZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yICBUw7xtYXkgw4dlYmVyIDx0dW1heWNlYmVyQGdtYWlsLmNvbT5cbiAqIEBsaW5rICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9icmVuZHR1bWkvYmttZXhwcmVzc1xuICogQGxpY2Vuc2UgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICogQGRhdGUgMjcuMDQuMjAxN1xuICovXG5cbmltcG9ydCB7ZXh0ZW5kfSBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge0NvcmVPcHRpb25zfSBmcm9tIFwicmVxdWVzdFwiO1xuaW1wb3J0ICogYXMgcmVxdWVzdCBmcm9tIFwicmVxdWVzdC1wcm9taXNlXCI7XG5pbXBvcnQge0xvZ30gZnJvbSBcIi4uL2RlYnVnXCI7XG5pbXBvcnQge01lcmNoYW50U2VydmljZUV4Y2VwdGlvbn0gZnJvbSBcIi4uL2V4Y2VwdGlvbnNcIjtcbmltcG9ydCB7TWVyY2hhbnRMb2dpblJlcXVlc3R9IGZyb20gXCIuL3JlcXVlc3QvbWVyY2hhbnRMb2dpblJlcXVlc3RcIjtcbmltcG9ydCB7VGlja2V0UmVxdWVzdH0gZnJvbSBcIi4vcmVxdWVzdC90aWNrZXRSZXF1ZXN0XCI7XG5pbXBvcnQge1Jhd0JleFJlc3BvbnNlfSBmcm9tIFwiLi9yZXNwb25zZS9iZXhSZXNwb25zZVwiO1xuaW1wb3J0IHtNZXJjaGFudE5vbmNlUmVzcG9uc2V9IGZyb20gXCIuL3Jlc3BvbnNlL25vbmNlL21lcmNoYW50Tm9uY2VSZXNwb25zZVwiO1xuaW1wb3J0IHtQb3NEYXRhfSBmcm9tIFwiLi9yZXNwb25zZS9wYXltZW50UmVzdWx0UmVzcG9uc2VcIjtcbmltcG9ydCB7VG9rZW59IGZyb20gXCIuL3Rva2VuXCI7XG5cbmV4cG9ydCBjbGFzcyBNZXJjaGFudEFwaSB7XG4gICAgcHVibGljIHN0YXRpYyBvcHRzOiBDb3JlT3B0aW9ucyA9IHtcbiAgICAgICAgYmFzZVVybDogbnVsbCxcbiAgICAgICAgYm9keToge30sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC8vIFwiQmV4LUNvbm5lY3Rpb25cIjogVG9rZW4uVG9rZW4sXG4gICAgICAgICAgICAvLyBcIkJleC1Ob25jZVwiOiBNZXJjaGFudE5vbmNlUmVzcG9uc2UuTm9uY2UsXG4gICAgICAgICAgICAvLyBcIkJleC1UaWNrZXRcIjogXCJcIixcbiAgICAgICAgfSxcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgdGltZW91dDogMjAwMDAsXG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgbG9naW4oYmFzZVVybDogc3RyaW5nLCBib2R5OiBNZXJjaGFudExvZ2luUmVxdWVzdCk6IFByb21pc2U8UmF3QmV4UmVzcG9uc2U8VG9rZW4+IHwgRXJyb3I+IHtcbiAgICAgICAgY29uc3Qgb3B0czogQ29yZU9wdGlvbnMgPSBleHRlbmQoTWVyY2hhbnRBcGkub3B0cywge2Jhc2VVcmwsIGJvZHl9KTtcbiAgICAgICAgTG9nLmRlYnVnKFwiTWVyY2hhbnRBcGlcIiwgXCJtZXJjaGFudC9sb2dpblwiLCBvcHRzKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoXCJtZXJjaGFudC9sb2dpblwiLCBvcHRzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRpY2tldChiYXNlVXJsOiBzdHJpbmcsIHRva2VuOiBUb2tlbiwgYm9keTogVGlja2V0UmVxdWVzdCk6IFByb21pc2U8UmF3QmV4UmVzcG9uc2U8VG9rZW4+IHwgRXJyb3I+IHtcbiAgICAgICAgaWYgKCEodG9rZW4gaW5zdGFuY2VvZiBUb2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXJjaGFudFNlcnZpY2VFeGNlcHRpb24oXCJUb2tlbiB2YWx1ZSBpbnZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdHM6IENvcmVPcHRpb25zID0gZXh0ZW5kKE1lcmNoYW50QXBpLm9wdHMsIHtiYXNlVXJsLCBib2R5LCBoZWFkZXJzOiB7XCJCZXgtQ29ubmVjdGlvblwiOiB0b2tlbi5Ub2tlbn19KTtcbiAgICAgICAgTG9nLmRlYnVnKFwiTWVyY2hhbnRBcGlcIiwgYG1lcmNoYW50LyR7dG9rZW4uUGF0aH0vdGlja2V0P3R5cGU9JHtib2R5LlR5cGV9YCwgb3B0cyk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KGBtZXJjaGFudC8ke3Rva2VuLlBhdGh9L3RpY2tldD90eXBlPSR7Ym9keS5UeXBlfWAsIG9wdHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY29tbWl0KGJhc2VVcmw6IHN0cmluZywgdG9rZW46IFRva2VuLCBib2R5OiBNZXJjaGFudE5vbmNlUmVzcG9uc2UpOiBQcm9taXNlPFJhd0JleFJlc3BvbnNlPFBvc0RhdGE+IHwgRXJyb3I+IHtcbiAgICAgICAgaWYgKCEodG9rZW4gaW5zdGFuY2VvZiBUb2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXJjaGFudFNlcnZpY2VFeGNlcHRpb24oXCJUb2tlbiB2YWx1ZSBpbnZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdHM6IENvcmVPcHRpb25zID0gZXh0ZW5kKE1lcmNoYW50QXBpLm9wdHMsIHtiYXNlVXJsLCBib2R5LCBoZWFkZXJzOiB7XCJCZXgtQ29ubmVjdGlvblwiOiB0b2tlbi5Ub2tlbiwgXCJCZXgtTm9uY2VcIjogYm9keS5Ob25jZX19KTtcbiAgICAgICAgTG9nLmRlYnVnKFwiTWVyY2hhbnRBcGlcIiwgYG1lcmNoYW50LyR7dG9rZW4uUGF0aH0vdGlja2V0LyR7Ym9keS5JZH0vb3BlcmF0ZT9uYW1lPWNvbW1pdGAsIG9wdHMpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdChgbWVyY2hhbnQvJHt0b2tlbi5QYXRofS90aWNrZXQvJHtib2R5LklkfS9vcGVyYXRlP25hbWU9Y29tbWl0YCwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyByZXN1bHQoYmFzZVVybDogc3RyaW5nLCB0b2tlbjogVG9rZW4sIHRpY2tldElkOiBzdHJpbmcpOiBQcm9taXNlPFJhd0JleFJlc3BvbnNlPFBvc0RhdGE+IHwgRXJyb3I+IHtcbiAgICAgICAgaWYgKCEodG9rZW4gaW5zdGFuY2VvZiBUb2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXJjaGFudFNlcnZpY2VFeGNlcHRpb24oXCJUb2tlbiB2YWx1ZSBpbnZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdHM6IENvcmVPcHRpb25zID0gZXh0ZW5kKE1lcmNoYW50QXBpLm9wdHMsIHtiYXNlVXJsLCBoZWFkZXJzOiB7XCJCZXgtQ29ubmVjdGlvblwiOiB0b2tlbi5Ub2tlbn19KTtcbiAgICAgICAgTG9nLmRlYnVnKFwiTWVyY2hhbnRBcGlcIiwgYG1lcmNoYW50LyR7dG9rZW4uUGF0aH0vdGlja2V0LyR7dGlja2V0SWR9L29wZXJhdGU/bmFtZT1yZXN1bHRgLCBvcHRzKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoYG1lcmNoYW50LyR7dG9rZW4uUGF0aH0vdGlja2V0LyR7dGlja2V0SWR9L29wZXJhdGU/bmFtZT1yZXN1bHRgLCBvcHRzKTtcbiAgICB9XG5cbn1cbiJdfQ==