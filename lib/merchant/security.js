"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var crypto = require("crypto");
var semver = require("semver");
var vposConfig_1 = require("./request/vposConfig");
var nodeVersion = semver.clean(process.version);
var exceptions_1 = require("../exceptions");
var EncryptionUtil = (function () {
    function EncryptionUtil() {
    }
    EncryptionUtil.sign = function (privateKey, data) {
        try {
            var sign = crypto.createSign("RSA-SHA256");
            sign.update(data);
            return sign.sign(privateKey, "base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.encryptWithBex = function (vposConfig) {
        if (vposConfig instanceof vposConfig_1.VposConfig) {
            return EncryptionUtil.encrypt(EncryptionUtil.publicKey, JSON.stringify(vposConfig));
        }
        else {
            return EncryptionUtil.encrypt(EncryptionUtil.publicKey, vposConfig);
        }
    };
    EncryptionUtil.encrypt = function (publicKey, plaintext) {
        try {
            var cipher = crypto.createCipher("RSA", publicKey);
            cipher.update(plaintext, "utf8");
            return cipher.final("base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.decrypt = function (privateKey, plaintext) {
        try {
            var decipher = crypto.createDecipher("RSA", privateKey);
            decipher.update(plaintext, "base64");
            return decipher.final("utf8");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.verifyBexSign = function (data, signature) {
        try {
            var verify = crypto.createVerify("RSA-SHA256");
            verify.update(data);
            verify.verify(EncryptionUtil.publicKey, signature, "base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
        return false;
    };
    EncryptionUtil.encode64 = function (data) {
        if (semver.gt(nodeVersion, "6.0.0")) {
            return buffer_1.Buffer.from(data).toString("base64");
        }
        else {
            return new buffer_1.Buffer(data).toString("base64");
        }
    };
    EncryptionUtil.decode64 = function (data) {
        if (semver.gt(nodeVersion, "6.0.0")) {
            return buffer_1.Buffer.from(data, "base64").toString();
        }
        else {
            return new buffer_1.Buffer(data, "base64").toString();
        }
    };
    return EncryptionUtil;
}());
EncryptionUtil.publicKey = "-----BEGIN PUBLIC KEY-----\n" +
    "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuZj/TQ9ZRY5KnsA3HMPq\n" +
    "bNwI32J+Bisyv7KX7IRJh5rN5LW3g7t6pulArLIEU3sn28ZQEQ+GCb9yvk6zIUoq\n" +
    "KBqH0H+gvxOtsklOUkFRgh+/FghNDoe0OzkXTLjQKhh6MRMBR9l3cws9nA2cu+M5\n" +
    "kw67F8j0+4SogHJ+VS1wA2kfWx58PNDIg9DtAVwmD1JbjAziPONv0wHSa8oNgia9\n" +
    "Tx6ia6FS4nfjRNqpVqI0m2jIcG8yXt1OaBSazkuRlRepMtDVwMGF4xOWXuRVv+G5\n" +
    "oiTsbOez9tQAcx+KH0W1Pn9Q9/zzOJyF9AS8J1UDE7c7rKwXGDnuTBU1BwdAGyB8\n" +
    "7QIDAQAB\n" +
    "-----END PUBLIC KEY-----";
exports.EncryptionUtil = EncryptionUtil;
//# sourceMappingURL=data:application/json;base64,