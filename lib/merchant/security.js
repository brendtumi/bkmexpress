"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var constants_1 = require("constants");
var crypto_1 = require("crypto");
var semver = require("semver");
var vposConfig_1 = require("./request/vposConfig");
var nodeVersion = semver.clean(process.version);
var exceptions_1 = require("../exceptions");
var EncryptionUtil = (function () {
    function EncryptionUtil() {
    }
    EncryptionUtil.sign = function (privateKey, data) {
        try {
            var sign = crypto_1.createSign("RSA-SHA256");
            sign.update(data);
            return sign.sign(privateKey, "base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.verify = function (publicKey, data, signature) {
        try {
            var verify = crypto_1.createVerify("RSA-SHA256");
            verify.update(data);
            return verify.verify(publicKey, signature, "base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.encrypt = function (publicKey, plaintext) {
        try {
            var plainBuffer = EncryptionUtil.bufferFromString(plaintext);
            var crypt = void 0;
            if (semver.gte(nodeVersion, "0.11.14")) {
                crypt = crypto_1.publicEncrypt(publicKey, plainBuffer);
            }
            else {
                var NodeRSA = require("node-rsa");
                var key = new NodeRSA(publicKey);
                crypt = key.encrypt(plainBuffer);
            }
            return crypt.toString("base64");
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.decrypt = function (privateKey, plaintext, isBase64) {
        if (isBase64 === void 0) { isBase64 = false; }
        try {
            var plainBuffer = EncryptionUtil.bufferFromString(plaintext, isBase64 ? "base64" : "utf8");
            var crypt = void 0;
            if (semver.gte(nodeVersion, "0.11.14")) {
                crypt = crypto_1.privateDecrypt(privateKey, plainBuffer);
            }
            else {
                var NodeRSA = require("node-rsa");
                var key = new NodeRSA(privateKey);
                crypt = key.decrypt(plainBuffer);
            }
            return crypt.toString();
        }
        catch (error) {
            throw new exceptions_1.EncryptionException(error);
        }
    };
    EncryptionUtil.verifyBexSign = function (data, signature) {
        return EncryptionUtil.verify(EncryptionUtil.publicKey, data, signature);
    };
    EncryptionUtil.encryptWithBex = function (vposConfig) {
        if (vposConfig instanceof vposConfig_1.VposConfig) {
            var data = JSON.stringify(vposConfig);
            var encrypted = "";
            for (var i = 0; i <= data.length / 245; i++) {
                encrypted += EncryptionUtil.encrypt(EncryptionUtil.PublicKey, data.substr(i * 245, (i + 1) * 245)) + "|:*:|";
            }
            return encrypted;
        }
        else {
            return EncryptionUtil.encrypt(EncryptionUtil.PublicKey, vposConfig);
        }
    };
    EncryptionUtil.encode64 = function (data) {
        return EncryptionUtil.bufferFromString(data).toString("base64");
    };
    EncryptionUtil.decode64 = function (data) {
        return EncryptionUtil.bufferFromString(data, "base64").toString();
    };
    Object.defineProperty(EncryptionUtil, "PublicKey", {
        get: function () {
            return { key: EncryptionUtil.publicKey, padding: constants_1.RSA_PKCS1_PADDING };
        },
        enumerable: true,
        configurable: true
    });
    EncryptionUtil.bufferFromString = function (data, encoding) {
        if (encoding === void 0) { encoding = "utf8"; }
        if (semver.gte(nodeVersion, "6.0.0")) {
            return buffer_1.Buffer.from(data, encoding);
        }
        else {
            return new buffer_1.Buffer(data, encoding);
        }
    };
    EncryptionUtil.publicKey = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuZj/TQ9ZRY5KnsA3HMPq\nbNwI32J+Bisyv7KX7IRJh5rN5LW3g7t6pulArLIEU3sn28ZQEQ+GCb9yvk6zIUoq\nKBqH0H+gvxOtsklOUkFRgh+/FghNDoe0OzkXTLjQKhh6MRMBR9l3cws9nA2cu+M5\nkw67F8j0+4SogHJ+VS1wA2kfWx58PNDIg9DtAVwmD1JbjAziPONv0wHSa8oNgia9\nTx6ia6FS4nfjRNqpVqI0m2jIcG8yXt1OaBSazkuRlRepMtDVwMGF4xOWXuRVv+G5\noiTsbOez9tQAcx+KH0W1Pn9Q9/zzOJyF9AS8J1UDE7c7rKwXGDnuTBU1BwdAGyB8\n7QIDAQAB\n-----END PUBLIC KEY-----";
    return EncryptionUtil;
}());
exports.EncryptionUtil = EncryptionUtil;
//# sourceMappingURL=data:application/json;base64,