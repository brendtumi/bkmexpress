/**
 * @author  Tümay Çeber <tumayceber@gmail.com>
 * @link    https://github.com/brendtumi/bkmexpress
 * @license http://opensource.org/licenses/MIT
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-classes-per-file */
var exceptions_1 = require("./exceptions");
var Environment = (function () {
    function Environment() {
    }
    return Environment;
}());
Environment.DEV = "DEV";
Environment.LOCAL = "LOCAL";
Environment.SANDBOX = "SANDBOX";
Environment.PRODUCTION = "PRODUCTION";
exports.Environment = Environment;
var Banks = (function () {
    function Banks() {
    }
    Banks.validate = function (bankCode) {
        switch (bankCode) {
            case this.ALBARAKA:
                return this.ALBARAKA;
            case this.AKBANK:
                return this.AKBANK;
            case this.BANKASYA:
                return this.BANKASYA;
            case this.DENIZBANK:
                return this.DENIZBANK;
            case this.FINANSBANK:
                return this.FINANSBANK;
            case this.GARANTI:
                return this.GARANTI;
            case this.HALKBANK:
                return this.HALKBANK;
            case this.HSBC:
                return this.HSBC;
            case this.ISBANK:
                return this.ISBANK;
            case this.ING:
                return this.ING;
            case this.KUVEYTTURK:
                return this.KUVEYTTURK;
            case this.ODEABANK:
                return this.ODEABANK;
            case this.SEKERBANK:
                return this.SEKERBANK;
            case this.TEBBANK:
                return this.TEBBANK;
            case this.TFKB:
                return this.TFKB;
            case this.VAKIFBANK:
                return this.VAKIFBANK;
            case this.YKB:
                return this.YKB;
            case this.ZIRAATBANK:
                return this.ZIRAATBANK;
            default:
                throw new exceptions_1.BexException("Please check your bank code!");
        }
    };
    return Banks;
}());
Banks.ALBARAKA = "0203";
Banks.AKBANK = "0046";
Banks.BANKASYA = "0208";
Banks.DENIZBANK = "0134";
Banks.FINANSBANK = "0111";
Banks.GARANTI = "0062";
Banks.HALKBANK = "0012";
Banks.HSBC = "0123";
Banks.ISBANK = "0064";
Banks.ING = "0099";
Banks.KUVEYTTURK = "0205";
Banks.ODEABANK = "0146";
Banks.SEKERBANK = "0059";
Banks.TEBBANK = "0032";
Banks.TFKB = "0206";
Banks.VAKIFBANK = "0015";
Banks.YKB = "0067";
Banks.ZIRAATBANK = "0010";
exports.Banks = Banks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZW51bXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRzs7O0FBRUgseUNBQXlDO0FBQ3pDLDJDQUEwQztBQUMxQztJQUFBO0lBS0EsQ0FBQztJQUFELGtCQUFDO0FBQUQsQ0FBQyxBQUxEO0FBQ2tCLGVBQUcsR0FBVyxLQUFLLENBQUM7QUFDcEIsaUJBQUssR0FBVyxPQUFPLENBQUM7QUFDeEIsbUJBQU8sR0FBVyxTQUFTLENBQUM7QUFDNUIsc0JBQVUsR0FBVyxZQUFZLENBQUM7QUFKdkMsa0NBQVc7QUFPeEI7SUFBQTtJQThEQSxDQUFDO0lBMUNpQixjQUFRLEdBQXRCLFVBQXVCLFFBQWdCO1FBQ25DLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZixLQUFLLElBQUksQ0FBQyxRQUFRO2dCQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3pCLEtBQUssSUFBSSxDQUFDLE1BQU07Z0JBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdkIsS0FBSyxJQUFJLENBQUMsUUFBUTtnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixLQUFLLElBQUksQ0FBQyxTQUFTO2dCQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzFCLEtBQUssSUFBSSxDQUFDLFVBQVU7Z0JBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzNCLEtBQUssSUFBSSxDQUFDLE9BQU87Z0JBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDeEIsS0FBSyxJQUFJLENBQUMsUUFBUTtnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixLQUFLLElBQUksQ0FBQyxJQUFJO2dCQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEtBQUssSUFBSSxDQUFDLE1BQU07Z0JBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRztnQkFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNwQixLQUFLLElBQUksQ0FBQyxVQUFVO2dCQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUMzQixLQUFLLElBQUksQ0FBQyxRQUFRO2dCQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3pCLEtBQUssSUFBSSxDQUFDLFNBQVM7Z0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsT0FBTztnQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN4QixLQUFLLElBQUksQ0FBQyxJQUFJO2dCQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEtBQUssSUFBSSxDQUFDLFNBQVM7Z0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRztnQkFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNwQixLQUFLLElBQUksQ0FBQyxVQUFVO2dCQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUMzQjtnQkFDSSxNQUFNLElBQUkseUJBQVksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQy9ELENBQUM7SUFDTCxDQUFDO0lBQ0wsWUFBQztBQUFELENBQUMsQUE5REQ7QUFDa0IsY0FBUSxHQUFXLE1BQU0sQ0FBQztBQUMxQixZQUFNLEdBQVcsTUFBTSxDQUFDO0FBQ3hCLGNBQVEsR0FBVyxNQUFNLENBQUM7QUFDMUIsZUFBUyxHQUFXLE1BQU0sQ0FBQztBQUMzQixnQkFBVSxHQUFXLE1BQU0sQ0FBQztBQUM1QixhQUFPLEdBQVcsTUFBTSxDQUFDO0FBQ3pCLGNBQVEsR0FBVyxNQUFNLENBQUM7QUFDMUIsVUFBSSxHQUFXLE1BQU0sQ0FBQztBQUN0QixZQUFNLEdBQVcsTUFBTSxDQUFDO0FBQ3hCLFNBQUcsR0FBVyxNQUFNLENBQUM7QUFDckIsZ0JBQVUsR0FBVyxNQUFNLENBQUM7QUFDNUIsY0FBUSxHQUFXLE1BQU0sQ0FBQztBQUMxQixlQUFTLEdBQVcsTUFBTSxDQUFDO0FBQzNCLGFBQU8sR0FBVyxNQUFNLENBQUM7QUFDekIsVUFBSSxHQUFXLE1BQU0sQ0FBQztBQUN0QixlQUFTLEdBQVcsTUFBTSxDQUFDO0FBQzNCLFNBQUcsR0FBVyxNQUFNLENBQUM7QUFDckIsZ0JBQVUsR0FBVyxNQUFNLENBQUM7QUFsQmpDLHNCQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yICBUw7xtYXkgw4dlYmVyIDx0dW1heWNlYmVyQGdtYWlsLmNvbT5cbiAqIEBsaW5rICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9icmVuZHR1bWkvYmttZXhwcmVzc1xuICogQGxpY2Vuc2UgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXG5pbXBvcnQge0JleEV4Y2VwdGlvbn0gZnJvbSBcIi4vZXhjZXB0aW9uc1wiO1xuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIERFVjogc3RyaW5nID0gXCJERVZcIjtcbiAgICBwdWJsaWMgc3RhdGljIExPQ0FMOiBzdHJpbmcgPSBcIkxPQ0FMXCI7XG4gICAgcHVibGljIHN0YXRpYyBTQU5EQk9YOiBzdHJpbmcgPSBcIlNBTkRCT1hcIjtcbiAgICBwdWJsaWMgc3RhdGljIFBST0RVQ1RJT046IHN0cmluZyA9IFwiUFJPRFVDVElPTlwiO1xufVxuXG5leHBvcnQgY2xhc3MgQmFua3Mge1xuICAgIHB1YmxpYyBzdGF0aWMgQUxCQVJBS0E6IHN0cmluZyA9IFwiMDIwM1wiO1xuICAgIHB1YmxpYyBzdGF0aWMgQUtCQU5LOiBzdHJpbmcgPSBcIjAwNDZcIjtcbiAgICBwdWJsaWMgc3RhdGljIEJBTktBU1lBOiBzdHJpbmcgPSBcIjAyMDhcIjtcbiAgICBwdWJsaWMgc3RhdGljIERFTklaQkFOSzogc3RyaW5nID0gXCIwMTM0XCI7XG4gICAgcHVibGljIHN0YXRpYyBGSU5BTlNCQU5LOiBzdHJpbmcgPSBcIjAxMTFcIjtcbiAgICBwdWJsaWMgc3RhdGljIEdBUkFOVEk6IHN0cmluZyA9IFwiMDA2MlwiO1xuICAgIHB1YmxpYyBzdGF0aWMgSEFMS0JBTks6IHN0cmluZyA9IFwiMDAxMlwiO1xuICAgIHB1YmxpYyBzdGF0aWMgSFNCQzogc3RyaW5nID0gXCIwMTIzXCI7XG4gICAgcHVibGljIHN0YXRpYyBJU0JBTks6IHN0cmluZyA9IFwiMDA2NFwiO1xuICAgIHB1YmxpYyBzdGF0aWMgSU5HOiBzdHJpbmcgPSBcIjAwOTlcIjtcbiAgICBwdWJsaWMgc3RhdGljIEtVVkVZVFRVUks6IHN0cmluZyA9IFwiMDIwNVwiO1xuICAgIHB1YmxpYyBzdGF0aWMgT0RFQUJBTks6IHN0cmluZyA9IFwiMDE0NlwiO1xuICAgIHB1YmxpYyBzdGF0aWMgU0VLRVJCQU5LOiBzdHJpbmcgPSBcIjAwNTlcIjtcbiAgICBwdWJsaWMgc3RhdGljIFRFQkJBTks6IHN0cmluZyA9IFwiMDAzMlwiO1xuICAgIHB1YmxpYyBzdGF0aWMgVEZLQjogc3RyaW5nID0gXCIwMjA2XCI7XG4gICAgcHVibGljIHN0YXRpYyBWQUtJRkJBTks6IHN0cmluZyA9IFwiMDAxNVwiO1xuICAgIHB1YmxpYyBzdGF0aWMgWUtCOiBzdHJpbmcgPSBcIjAwNjdcIjtcbiAgICBwdWJsaWMgc3RhdGljIFpJUkFBVEJBTks6IHN0cmluZyA9IFwiMDAxMFwiO1xuXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZShiYW5rQ29kZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoIChiYW5rQ29kZSkge1xuICAgICAgICAgICAgY2FzZSB0aGlzLkFMQkFSQUtBIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5BTEJBUkFLQTtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5BS0JBTksgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkFLQkFOSztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5CQU5LQVNZQSA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuQkFOS0FTWUE7XG4gICAgICAgICAgICBjYXNlIHRoaXMuREVOSVpCQU5LIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ERU5JWkJBTks7XG4gICAgICAgICAgICBjYXNlIHRoaXMuRklOQU5TQkFOSyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRklOQU5TQkFOSztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5HQVJBTlRJIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5HQVJBTlRJO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkhBTEtCQU5LIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5IQUxLQkFOSztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5IU0JDIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5IU0JDO1xuICAgICAgICAgICAgY2FzZSB0aGlzLklTQkFOSyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSVNCQU5LO1xuICAgICAgICAgICAgY2FzZSB0aGlzLklORyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSU5HO1xuICAgICAgICAgICAgY2FzZSB0aGlzLktVVkVZVFRVUksgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLktVVkVZVFRVUks7XG4gICAgICAgICAgICBjYXNlIHRoaXMuT0RFQUJBTksgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLk9ERUFCQU5LO1xuICAgICAgICAgICAgY2FzZSB0aGlzLlNFS0VSQkFOSyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuU0VLRVJCQU5LO1xuICAgICAgICAgICAgY2FzZSB0aGlzLlRFQkJBTksgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlRFQkJBTks7XG4gICAgICAgICAgICBjYXNlIHRoaXMuVEZLQiA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVEZLQjtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5WQUtJRkJBTksgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlZBS0lGQkFOSztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5ZS0IgOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLllLQjtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5aSVJBQVRCQU5LIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5aSVJBQVRCQU5LO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmV4RXhjZXB0aW9uKFwiUGxlYXNlIGNoZWNrIHlvdXIgYmFuayBjb2RlIVwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==